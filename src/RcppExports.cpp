// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Mixed_Binomial_LogLikelihood_repara
double Mixed_Binomial_LogLikelihood_repara(NumericVector Pi_nk, NumericVector V, NumericVector R, NumericVector purity, NumericVector CNv, NumericVector CNr, double omega, double mu);
RcppExport SEXP _Ares_Mixed_Binomial_LogLikelihood_repara(SEXP Pi_nkSEXP, SEXP VSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP omegaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Mixed_Binomial_LogLikelihood_repara(Pi_nk, V, R, purity, CNv, CNr, omega, mu));
    return rcpp_result_gen;
END_RCPP
}
// Min_Mu_Binomial_repara
double Min_Mu_Binomial_repara(double lower, double upper, double tol, NumericVector Pi_nk, NumericVector V, NumericVector R, NumericVector purity, NumericVector CNv, NumericVector CNr, double omega);
RcppExport SEXP _Ares_Min_Mu_Binomial_repara(SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP, SEXP Pi_nkSEXP, SEXP VSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(Min_Mu_Binomial_repara(lower, upper, tol, Pi_nk, V, R, purity, CNv, CNr, omega));
    return rcpp_result_gen;
END_RCPP
}
// Min_Omega_Binomial_repara
double Min_Omega_Binomial_repara(double lower, double upper, double tol, NumericVector Pi_nk, NumericVector V, NumericVector R, NumericVector purity, NumericVector CNv, NumericVector CNr, double mu);
RcppExport SEXP _Ares_Min_Omega_Binomial_repara(SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP, SEXP Pi_nkSEXP, SEXP VSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Min_Omega_Binomial_repara(lower, upper, tol, Pi_nk, V, R, purity, CNv, CNr, mu));
    return rcpp_result_gen;
END_RCPP
}
// Solve_mixed_Binomial_repara
List Solve_mixed_Binomial_repara(NumericVector Pi_nk, NumericVector V, NumericVector R, NumericVector purity, NumericVector CNv, NumericVector CNr);
RcppExport SEXP _Ares_Solve_mixed_Binomial_repara(SEXP Pi_nkSEXP, SEXP VSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNvSEXP, SEXP CNrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    rcpp_result_gen = Rcpp::wrap(Solve_mixed_Binomial_repara(Pi_nk, V, R, purity, CNv, CNr));
    return rcpp_result_gen;
END_RCPP
}
// Mixed_Binomial_LogLikelihood_newton
double Mixed_Binomial_LogLikelihood_newton(NumericVector Pi_nk, NumericVector V, NumericVector R, NumericVector purity, NumericVector CNv, NumericVector CNr, double omega, double mu);
RcppExport SEXP _Ares_Mixed_Binomial_LogLikelihood_newton(SEXP Pi_nkSEXP, SEXP VSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP omegaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Mixed_Binomial_LogLikelihood_newton(Pi_nk, V, R, purity, CNv, CNr, omega, mu));
    return rcpp_result_gen;
END_RCPP
}
// Mixed_Binomial_LogLikelihood
double Mixed_Binomial_LogLikelihood(NumericVector Pi_nk, NumericVector V, NumericVector R, NumericVector purity, NumericVector CNv, NumericVector CNr, double omega, double mu);
RcppExport SEXP _Ares_Mixed_Binomial_LogLikelihood(SEXP Pi_nkSEXP, SEXP VSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP omegaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Mixed_Binomial_LogLikelihood(Pi_nk, V, R, purity, CNv, CNr, omega, mu));
    return rcpp_result_gen;
END_RCPP
}
// Min_Mu_Binomial
double Min_Mu_Binomial(double lower, double upper, double tol, NumericVector Pi_nk, NumericVector V, NumericVector R, NumericVector purity, NumericVector CNv, NumericVector CNr, double omega);
RcppExport SEXP _Ares_Min_Mu_Binomial(SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP, SEXP Pi_nkSEXP, SEXP VSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(Min_Mu_Binomial(lower, upper, tol, Pi_nk, V, R, purity, CNv, CNr, omega));
    return rcpp_result_gen;
END_RCPP
}
// Min_Omega_Binomial
double Min_Omega_Binomial(double lower, double upper, double tol, NumericVector Pi_nk, NumericVector V, NumericVector R, NumericVector purity, NumericVector CNv, NumericVector CNr, double mu);
RcppExport SEXP _Ares_Min_Omega_Binomial(SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP, SEXP Pi_nkSEXP, SEXP VSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Min_Omega_Binomial(lower, upper, tol, Pi_nk, V, R, purity, CNv, CNr, mu));
    return rcpp_result_gen;
END_RCPP
}
// Solve_mixed_Binomial_Goldensection
List Solve_mixed_Binomial_Goldensection(NumericVector Pi_nk, NumericVector V, NumericVector R, NumericVector purity, NumericVector CNv, NumericVector CNr);
RcppExport SEXP _Ares_Solve_mixed_Binomial_Goldensection(SEXP Pi_nkSEXP, SEXP VSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNvSEXP, SEXP CNrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    rcpp_result_gen = Rcpp::wrap(Solve_mixed_Binomial_Goldensection(Pi_nk, V, R, purity, CNv, CNr));
    return rcpp_result_gen;
END_RCPP
}
// Solve_mixed_Binomial_newton_Goldensection
List Solve_mixed_Binomial_newton_Goldensection(NumericVector Pi_nk, NumericVector V, NumericVector R, NumericVector purity, NumericVector CNv, NumericVector CNr);
RcppExport SEXP _Ares_Solve_mixed_Binomial_newton_Goldensection(SEXP Pi_nkSEXP, SEXP VSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNvSEXP, SEXP CNrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    rcpp_result_gen = Rcpp::wrap(Solve_mixed_Binomial_newton_Goldensection(Pi_nk, V, R, purity, CNv, CNr));
    return rcpp_result_gen;
END_RCPP
}
// Ares_mix_SNP_LogLikelihood
double Ares_mix_SNP_LogLikelihood(NumericVector Pi_nk, NumericVector B, NumericVector R, NumericVector purity, NumericVector CNA, NumericVector CNB, double alpha, double omega, double mu);
RcppExport SEXP _Ares_Ares_mix_SNP_LogLikelihood(SEXP Pi_nkSEXP, SEXP BSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP alphaSEXP, SEXP omegaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Ares_mix_SNP_LogLikelihood(Pi_nk, B, R, purity, CNA, CNB, alpha, omega, mu));
    return rcpp_result_gen;
END_RCPP
}
// Min_Alpha_Ares_mix_SNP
double Min_Alpha_Ares_mix_SNP(double lower, double upper, double tol, NumericVector Pi_nk, NumericVector B, NumericVector R, NumericVector purity, NumericVector CNA, NumericVector CNB, double omega, double mu);
RcppExport SEXP _Ares_Min_Alpha_Ares_mix_SNP(SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP, SEXP Pi_nkSEXP, SEXP BSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP omegaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Min_Alpha_Ares_mix_SNP(lower, upper, tol, Pi_nk, B, R, purity, CNA, CNB, omega, mu));
    return rcpp_result_gen;
END_RCPP
}
// Min_Omega_Ares_mix_SNP
double Min_Omega_Ares_mix_SNP(double lower, double upper, double tol, NumericVector Pi_nk, NumericVector B, NumericVector R, NumericVector purity, NumericVector CNA, NumericVector CNB, double alpha, double mu);
RcppExport SEXP _Ares_Min_Omega_Ares_mix_SNP(SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP, SEXP Pi_nkSEXP, SEXP BSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP alphaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Min_Omega_Ares_mix_SNP(lower, upper, tol, Pi_nk, B, R, purity, CNA, CNB, alpha, mu));
    return rcpp_result_gen;
END_RCPP
}
// Min_Mu_Ares_mix_SNP
double Min_Mu_Ares_mix_SNP(double lower, double upper, double tol, NumericVector Pi_nk, NumericVector B, NumericVector R, NumericVector purity, NumericVector CNA, NumericVector CNB, double alpha, double omega);
RcppExport SEXP _Ares_Min_Mu_Ares_mix_SNP(SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP, SEXP Pi_nkSEXP, SEXP BSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP alphaSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(Min_Mu_Ares_mix_SNP(lower, upper, tol, Pi_nk, B, R, purity, CNA, CNB, alpha, omega));
    return rcpp_result_gen;
END_RCPP
}
// Solve_Ares_mix_SNP
List Solve_Ares_mix_SNP(NumericVector Pi_nk, NumericVector B, NumericVector R, NumericVector purity, NumericVector CNA, NumericVector CNB);
RcppExport SEXP _Ares_Solve_Ares_mix_SNP(SEXP Pi_nkSEXP, SEXP BSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNASEXP, SEXP CNBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk(Pi_nkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    rcpp_result_gen = Rcpp::wrap(Solve_Ares_mix_SNP(Pi_nk, B, R, purity, CNA, CNB));
    return rcpp_result_gen;
END_RCPP
}
// Ares_mix_SNP_Mstep
List Ares_mix_SNP_Mstep(NumericMatrix Pi, NumericVector B, NumericVector R, NumericVector purity, NumericVector CNA, NumericVector CNB, int K_cluster);
RcppExport SEXP _Ares_Ares_mix_SNP_Mstep(SEXP PiSEXP, SEXP BSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP K_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< int >::type K_cluster(K_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(Ares_mix_SNP_Mstep(Pi, B, R, purity, CNA, CNB, K_cluster));
    return rcpp_result_gen;
END_RCPP
}
// Ares_mix_SNP_Gradient
List Ares_mix_SNP_Gradient(NumericMatrix Pi, NumericVector B, NumericVector R, NumericVector purity, NumericVector CNA, NumericVector CNB, int K_cluster);
RcppExport SEXP _Ares_Ares_mix_SNP_Gradient(SEXP PiSEXP, SEXP BSEXP, SEXP RSEXP, SEXP puritySEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP K_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< int >::type K_cluster(K_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(Ares_mix_SNP_Gradient(Pi, B, R, purity, CNA, CNB, K_cluster));
    return rcpp_result_gen;
END_RCPP
}
// Ares_mix_Combined_LogLikelihood
double Ares_mix_Combined_LogLikelihood(NumericVector Pi_nk_SNP, NumericVector B, NumericVector R_SNP, NumericVector purity_SNP, NumericVector CNA, NumericVector CNB, NumericVector Pi_nk_SNV, NumericVector V, NumericVector R_SNV, NumericVector purity_SNV, NumericVector CNv, NumericVector CNr, double alpha, double omega_SNP, double omega_SNV, double mu);
RcppExport SEXP _Ares_Ares_mix_Combined_LogLikelihood(SEXP Pi_nk_SNPSEXP, SEXP BSEXP, SEXP R_SNPSEXP, SEXP purity_SNPSEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP Pi_nk_SNVSEXP, SEXP VSEXP, SEXP R_SNVSEXP, SEXP purity_SNVSEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP alphaSEXP, SEXP omega_SNPSEXP, SEXP omega_SNVSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk_SNP(Pi_nk_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNP(R_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNP(purity_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk_SNV(Pi_nk_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNV(R_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNV(purity_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type omega_SNP(omega_SNPSEXP);
    Rcpp::traits::input_parameter< double >::type omega_SNV(omega_SNVSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Ares_mix_Combined_LogLikelihood(Pi_nk_SNP, B, R_SNP, purity_SNP, CNA, CNB, Pi_nk_SNV, V, R_SNV, purity_SNV, CNv, CNr, alpha, omega_SNP, omega_SNV, mu));
    return rcpp_result_gen;
END_RCPP
}
// Min_Mu_Ares_mix_Combined
double Min_Mu_Ares_mix_Combined(double lower, double upper, double tol, NumericVector Pi_nk_SNP, NumericVector B, NumericVector R_SNP, NumericVector purity_SNP, NumericVector CNA, NumericVector CNB, NumericVector Pi_nk_SNV, NumericVector V, NumericVector R_SNV, NumericVector purity_SNV, NumericVector CNv, NumericVector CNr, double alpha, double omega_SNP, double omega_SNV);
RcppExport SEXP _Ares_Min_Mu_Ares_mix_Combined(SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP, SEXP Pi_nk_SNPSEXP, SEXP BSEXP, SEXP R_SNPSEXP, SEXP purity_SNPSEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP Pi_nk_SNVSEXP, SEXP VSEXP, SEXP R_SNVSEXP, SEXP purity_SNVSEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP alphaSEXP, SEXP omega_SNPSEXP, SEXP omega_SNVSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk_SNP(Pi_nk_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNP(R_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNP(purity_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk_SNV(Pi_nk_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNV(R_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNV(purity_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type omega_SNP(omega_SNPSEXP);
    Rcpp::traits::input_parameter< double >::type omega_SNV(omega_SNVSEXP);
    rcpp_result_gen = Rcpp::wrap(Min_Mu_Ares_mix_Combined(lower, upper, tol, Pi_nk_SNP, B, R_SNP, purity_SNP, CNA, CNB, Pi_nk_SNV, V, R_SNV, purity_SNV, CNv, CNr, alpha, omega_SNP, omega_SNV));
    return rcpp_result_gen;
END_RCPP
}
// Solve_Ares_mix_Combined_Mu
List Solve_Ares_mix_Combined_Mu(NumericVector Pi_nk_SNP, NumericVector B, NumericVector R_SNP, NumericVector purity_SNP, NumericVector CNA, NumericVector CNB, NumericVector Pi_nk_SNV, NumericVector V, NumericVector R_SNV, NumericVector purity_SNV, NumericVector CNv, NumericVector CNr);
RcppExport SEXP _Ares_Solve_Ares_mix_Combined_Mu(SEXP Pi_nk_SNPSEXP, SEXP BSEXP, SEXP R_SNPSEXP, SEXP purity_SNPSEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP Pi_nk_SNVSEXP, SEXP VSEXP, SEXP R_SNVSEXP, SEXP purity_SNVSEXP, SEXP CNvSEXP, SEXP CNrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk_SNP(Pi_nk_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNP(R_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNP(purity_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk_SNV(Pi_nk_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNV(R_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNV(purity_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    rcpp_result_gen = Rcpp::wrap(Solve_Ares_mix_Combined_Mu(Pi_nk_SNP, B, R_SNP, purity_SNP, CNA, CNB, Pi_nk_SNV, V, R_SNV, purity_SNV, CNv, CNr));
    return rcpp_result_gen;
END_RCPP
}
// Solve_Ares_mix_Combined
List Solve_Ares_mix_Combined(NumericVector Pi_nk_SNP, NumericVector B, NumericVector R_SNP, NumericVector purity_SNP, NumericVector CNA, NumericVector CNB, NumericVector Pi_nk_SNV, NumericVector V, NumericVector R_SNV, NumericVector purity_SNV, NumericVector CNv, NumericVector CNr);
RcppExport SEXP _Ares_Solve_Ares_mix_Combined(SEXP Pi_nk_SNPSEXP, SEXP BSEXP, SEXP R_SNPSEXP, SEXP purity_SNPSEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP Pi_nk_SNVSEXP, SEXP VSEXP, SEXP R_SNVSEXP, SEXP purity_SNVSEXP, SEXP CNvSEXP, SEXP CNrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk_SNP(Pi_nk_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNP(R_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNP(purity_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk_SNV(Pi_nk_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNV(R_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNV(purity_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    rcpp_result_gen = Rcpp::wrap(Solve_Ares_mix_Combined(Pi_nk_SNP, B, R_SNP, purity_SNP, CNA, CNB, Pi_nk_SNV, V, R_SNV, purity_SNV, CNv, CNr));
    return rcpp_result_gen;
END_RCPP
}
// Ares_mix_Combined_Mstep_Mu
List Ares_mix_Combined_Mstep_Mu(NumericMatrix Pi_SNP, NumericVector B, NumericVector R_SNP, NumericVector purity_SNP, NumericVector CNA, NumericVector CNB, NumericMatrix Pi_SNV, NumericVector V, NumericVector R_SNV, NumericVector purity_SNV, NumericVector CNv, NumericVector CNr, int K_cluster);
RcppExport SEXP _Ares_Ares_mix_Combined_Mstep_Mu(SEXP Pi_SNPSEXP, SEXP BSEXP, SEXP R_SNPSEXP, SEXP purity_SNPSEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP Pi_SNVSEXP, SEXP VSEXP, SEXP R_SNVSEXP, SEXP purity_SNVSEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP K_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_SNP(Pi_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNP(R_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNP(purity_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_SNV(Pi_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNV(R_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNV(purity_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< int >::type K_cluster(K_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(Ares_mix_Combined_Mstep_Mu(Pi_SNP, B, R_SNP, purity_SNP, CNA, CNB, Pi_SNV, V, R_SNV, purity_SNV, CNv, CNr, K_cluster));
    return rcpp_result_gen;
END_RCPP
}
// Ares_mix_Combined_Mstep
List Ares_mix_Combined_Mstep(NumericMatrix Pi_SNP, NumericVector B, NumericVector R_SNP, NumericVector purity_SNP, NumericVector CNA, NumericVector CNB, NumericMatrix Pi_SNV, NumericVector V, NumericVector R_SNV, NumericVector purity_SNV, NumericVector CNv, NumericVector CNr, int K_cluster);
RcppExport SEXP _Ares_Ares_mix_Combined_Mstep(SEXP Pi_SNPSEXP, SEXP BSEXP, SEXP R_SNPSEXP, SEXP purity_SNPSEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP Pi_SNVSEXP, SEXP VSEXP, SEXP R_SNVSEXP, SEXP purity_SNVSEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP K_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_SNP(Pi_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNP(R_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNP(purity_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_SNV(Pi_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNV(R_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNV(purity_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< int >::type K_cluster(K_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(Ares_mix_Combined_Mstep(Pi_SNP, B, R_SNP, purity_SNP, CNA, CNB, Pi_SNV, V, R_SNV, purity_SNV, CNv, CNr, K_cluster));
    return rcpp_result_gen;
END_RCPP
}
// Ares_mix_Combined_Mstep2
List Ares_mix_Combined_Mstep2(NumericMatrix Pi_SNP, NumericVector B, NumericVector R_SNP, NumericVector purity_SNP, NumericVector CNA, NumericVector CNB, NumericMatrix Pi_SNV, NumericVector V, NumericVector R_SNV, NumericVector purity_SNV, NumericVector CNv, NumericVector CNr, int K_cluster);
RcppExport SEXP _Ares_Ares_mix_Combined_Mstep2(SEXP Pi_SNPSEXP, SEXP BSEXP, SEXP R_SNPSEXP, SEXP purity_SNPSEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP Pi_SNVSEXP, SEXP VSEXP, SEXP R_SNVSEXP, SEXP purity_SNVSEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP K_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_SNP(Pi_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNP(R_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNP(purity_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_SNV(Pi_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNV(R_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNV(purity_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< int >::type K_cluster(K_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(Ares_mix_Combined_Mstep2(Pi_SNP, B, R_SNP, purity_SNP, CNA, CNB, Pi_SNV, V, R_SNV, purity_SNV, CNv, CNr, K_cluster));
    return rcpp_result_gen;
END_RCPP
}
// Solve_Ares_mix_Combined_Independent
List Solve_Ares_mix_Combined_Independent(NumericVector Pi_nk_SNP, NumericVector B, NumericVector R_SNP, NumericVector purity_SNP, NumericVector CNA, NumericVector CNB, NumericVector Pi_nk_SNV, NumericVector V, NumericVector R_SNV, NumericVector purity_SNV, NumericVector CNv, NumericVector CNr);
RcppExport SEXP _Ares_Solve_Ares_mix_Combined_Independent(SEXP Pi_nk_SNPSEXP, SEXP BSEXP, SEXP R_SNPSEXP, SEXP purity_SNPSEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP Pi_nk_SNVSEXP, SEXP VSEXP, SEXP R_SNVSEXP, SEXP purity_SNVSEXP, SEXP CNvSEXP, SEXP CNrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk_SNP(Pi_nk_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNP(R_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNP(purity_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi_nk_SNV(Pi_nk_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNV(R_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNV(purity_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    rcpp_result_gen = Rcpp::wrap(Solve_Ares_mix_Combined_Independent(Pi_nk_SNP, B, R_SNP, purity_SNP, CNA, CNB, Pi_nk_SNV, V, R_SNV, purity_SNV, CNv, CNr));
    return rcpp_result_gen;
END_RCPP
}
// Ares_mix_Combined_Independent
List Ares_mix_Combined_Independent(NumericMatrix Pi_SNP, NumericVector B, NumericVector R_SNP, NumericVector purity_SNP, NumericVector CNA, NumericVector CNB, NumericMatrix Pi_SNV, NumericVector V, NumericVector R_SNV, NumericVector purity_SNV, NumericVector CNv, NumericVector CNr, int K_cluster);
RcppExport SEXP _Ares_Ares_mix_Combined_Independent(SEXP Pi_SNPSEXP, SEXP BSEXP, SEXP R_SNPSEXP, SEXP purity_SNPSEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP Pi_SNVSEXP, SEXP VSEXP, SEXP R_SNVSEXP, SEXP purity_SNVSEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP K_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_SNP(Pi_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNP(R_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNP(purity_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_SNV(Pi_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNV(R_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNV(purity_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< int >::type K_cluster(K_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(Ares_mix_Combined_Independent(Pi_SNP, B, R_SNP, purity_SNP, CNA, CNB, Pi_SNV, V, R_SNV, purity_SNV, CNv, CNr, K_cluster));
    return rcpp_result_gen;
END_RCPP
}
// Ares_mix_Joint
List Ares_mix_Joint(NumericMatrix Pi_SNP, NumericVector B, NumericVector R_SNP, NumericVector purity_SNP, NumericVector CNA, NumericVector CNB, NumericMatrix Pi_SNV, NumericVector V, NumericVector R_SNV, NumericVector purity_SNV, NumericVector CNv, NumericVector CNr, int K_cluster);
RcppExport SEXP _Ares_Ares_mix_Joint(SEXP Pi_SNPSEXP, SEXP BSEXP, SEXP R_SNPSEXP, SEXP purity_SNPSEXP, SEXP CNASEXP, SEXP CNBSEXP, SEXP Pi_SNVSEXP, SEXP VSEXP, SEXP R_SNVSEXP, SEXP purity_SNVSEXP, SEXP CNvSEXP, SEXP CNrSEXP, SEXP K_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_SNP(Pi_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNP(R_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNP(purity_SNPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNA(CNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNB(CNBSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_SNV(Pi_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_SNV(R_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type purity_SNV(purity_SNVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNv(CNvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CNr(CNrSEXP);
    Rcpp::traits::input_parameter< int >::type K_cluster(K_clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(Ares_mix_Joint(Pi_SNP, B, R_SNP, purity_SNP, CNA, CNB, Pi_SNV, V, R_SNV, purity_SNV, CNv, CNr, K_cluster));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Ares_Mixed_Binomial_LogLikelihood_repara", (DL_FUNC) &_Ares_Mixed_Binomial_LogLikelihood_repara, 8},
    {"_Ares_Min_Mu_Binomial_repara", (DL_FUNC) &_Ares_Min_Mu_Binomial_repara, 10},
    {"_Ares_Min_Omega_Binomial_repara", (DL_FUNC) &_Ares_Min_Omega_Binomial_repara, 10},
    {"_Ares_Solve_mixed_Binomial_repara", (DL_FUNC) &_Ares_Solve_mixed_Binomial_repara, 6},
    {"_Ares_Mixed_Binomial_LogLikelihood_newton", (DL_FUNC) &_Ares_Mixed_Binomial_LogLikelihood_newton, 8},
    {"_Ares_Mixed_Binomial_LogLikelihood", (DL_FUNC) &_Ares_Mixed_Binomial_LogLikelihood, 8},
    {"_Ares_Min_Mu_Binomial", (DL_FUNC) &_Ares_Min_Mu_Binomial, 10},
    {"_Ares_Min_Omega_Binomial", (DL_FUNC) &_Ares_Min_Omega_Binomial, 10},
    {"_Ares_Solve_mixed_Binomial_Goldensection", (DL_FUNC) &_Ares_Solve_mixed_Binomial_Goldensection, 6},
    {"_Ares_Solve_mixed_Binomial_newton_Goldensection", (DL_FUNC) &_Ares_Solve_mixed_Binomial_newton_Goldensection, 6},
    {"_Ares_Ares_mix_SNP_LogLikelihood", (DL_FUNC) &_Ares_Ares_mix_SNP_LogLikelihood, 9},
    {"_Ares_Min_Alpha_Ares_mix_SNP", (DL_FUNC) &_Ares_Min_Alpha_Ares_mix_SNP, 11},
    {"_Ares_Min_Omega_Ares_mix_SNP", (DL_FUNC) &_Ares_Min_Omega_Ares_mix_SNP, 11},
    {"_Ares_Min_Mu_Ares_mix_SNP", (DL_FUNC) &_Ares_Min_Mu_Ares_mix_SNP, 11},
    {"_Ares_Solve_Ares_mix_SNP", (DL_FUNC) &_Ares_Solve_Ares_mix_SNP, 6},
    {"_Ares_Ares_mix_SNP_Mstep", (DL_FUNC) &_Ares_Ares_mix_SNP_Mstep, 7},
    {"_Ares_Ares_mix_SNP_Gradient", (DL_FUNC) &_Ares_Ares_mix_SNP_Gradient, 7},
    {"_Ares_Ares_mix_Combined_LogLikelihood", (DL_FUNC) &_Ares_Ares_mix_Combined_LogLikelihood, 16},
    {"_Ares_Min_Mu_Ares_mix_Combined", (DL_FUNC) &_Ares_Min_Mu_Ares_mix_Combined, 18},
    {"_Ares_Solve_Ares_mix_Combined_Mu", (DL_FUNC) &_Ares_Solve_Ares_mix_Combined_Mu, 12},
    {"_Ares_Solve_Ares_mix_Combined", (DL_FUNC) &_Ares_Solve_Ares_mix_Combined, 12},
    {"_Ares_Ares_mix_Combined_Mstep_Mu", (DL_FUNC) &_Ares_Ares_mix_Combined_Mstep_Mu, 13},
    {"_Ares_Ares_mix_Combined_Mstep", (DL_FUNC) &_Ares_Ares_mix_Combined_Mstep, 13},
    {"_Ares_Ares_mix_Combined_Mstep2", (DL_FUNC) &_Ares_Ares_mix_Combined_Mstep2, 13},
    {"_Ares_Solve_Ares_mix_Combined_Independent", (DL_FUNC) &_Ares_Solve_Ares_mix_Combined_Independent, 12},
    {"_Ares_Ares_mix_Combined_Independent", (DL_FUNC) &_Ares_Ares_mix_Combined_Independent, 13},
    {"_Ares_Ares_mix_Joint", (DL_FUNC) &_Ares_Ares_mix_Joint, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_Ares(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
